#This workflow lints ansible code and launches the K8S cluster.

name: Launching K8s cluster

on:
  pull_request:
    branches: [ main ]

jobs:
  ansible-lint:
    name: ansible-lint
    runs-on: ubuntu-latest

    steps:
      - run: |
          date
          hostname
          pwd
          whoami

      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Lint Ansible Code
        uses: ansible/ansible-lint-action@v6
        with:
          targets: |
            multinode-k8s-cluster-on-AWS/k8s_master_conf/tasks/main.yml
            multinode-k8s-cluster-on-AWS/k8s_worker_conf/tasks/main.yml

  launch-cluster:
    name: launch-cluster
    runs-on: ubuntu-latest
    needs: ansible-lint

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - run: |
          date
          hostname
          pwd
          whoami

      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Setup Ansible And Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==2.10.7 ansible-lint==6.0.2 jsondiff==2.0.0 passlib==1.7.4 PyYAML==5.3.1

      - name: Install kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        run: terraform init

      - name: Format Terraform Code
        run: terraform fmt

      - name: Validate Terraform Code
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -var="access_key=${AWS_ACCESS_KEY}" -var="secret_key=${AWS_SECRET_KEY}" -no-color -out cluster.tfplan
          cat cluster.tfplan

      - name: Create K8S Cluster
        run: terraform apply cluster.tfplan -no-color

      - name: Get Ready Nodes Count
        id: get_ready_nodes
        run: |
          cp admin.conf ./tests/
          rn=`sh ./tests/nodes-status.sh`
          echo "::set-output name=rn::$rn"

      - name: Checking Number of Ready Nodes
        if: ${{ steps.get_ready_nodes.outputs.rn < 3 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Nodes not ready')

      - name: Get Running Core Objects Count
        id: get_obj
        run: |
          gob=`sh ./tests/core-objects-status.sh`
          echo "::set-output name=gob::$gob"

      - name: Check Number of Running Core Objects
        if: ${{ steps.get_obj.outputs.gob < 12 }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Objects not running')

      - name: Cleaning up sensitive files
        run: |
          rm -rf admin.conf k8s_ssh_key.pem token_file.txt

      - name: Destroy K8S Cluster
        run: terraform destroy -no-color -auto-approve

  build_arm_image:
    name: build_arm_image
    runs_on: ubuntu-22.04
    needs: launch-cluster
    
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/tf-k8s-launcher-arm
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_AT }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Set Up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest

      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo "platform=${TARGET_PLATFORM}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=${DOCKER_REGISTRY}/${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: Login To DockerHub
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

      - name: Run Buildx (Push image to DockerHub)
        if: success()
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.platform }} -t ${{ steps.prepare.outputs.docker_image_tag }}:${{ steps.prepare.outputs.version }} --output type=image,push=true -f ./dockerfiles/arm64/Dockerfile

  build_amd64_image:
    name: build_amd64_image
    runs_on: ubuntu-latest
    needs: build_arm_image

    permissions:
      contents: read
      packages: write

    env:
      #DockerHub
      DOCKER_REGISTRY: docker.io
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/tf-k8s-launcher
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_AT }}

      #Github Container Repo
      GHCR_REGISTRY: ghcr.io
      GHCR_IMAGE: yashindane/tf-k8s-launcher
      GHCR_USERNAME: ${{ github.actor }}
      GHCR_PASSWORD: ${{ secrets.TOK }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${DOCKER_USERNAME}
          password: ${DOCKER_PASSWORD}

      - name: Build The Image
        run: |
          docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${GITHUB_RUN_NUMBER} -f ./dockerfiles/amd64/Dockerfile

      - name: Push Image To DockerHub
        run: |
          docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${GITHUB_RUN_NUMBER}

      - name: Login To GHCR
        uses: docker/login-action@v1
        with:
          username: ${GHCR_USERNAME}
          password: ${GHCR_PASSWORD}

      - name: Push Image To GHCR
        run: |
          docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${GITHUB_RUN_NUMBER}
